#version 400
//tipo de division a efectuar
layout (quads, fractional_even_spacing) in;
in vec3 TCPosition[];
out vec3 TENormal;
out vec4 TEPosition;
out float TETessLevel;

uniform mat3 NormalMatrix;

//Calcula un punto de bezier para un parametro t
void basisFunctions( out float[4] b, out float[4] db, float t ) {
    float t1 = (1.0 - t);
    float t12 = t1 * t1;

    //Punto
    b[0] = t12 * t1;
    b[1] = 3.0 * t12 * t;
    b[2] = 3.0 * t1 * t * t;
    b[3] = t * t * t;

    //Derivadas en el punto
    db[0] = -3.0 * t12;
    db[1] = -6.0 * t * t1 + 3.0 * t12;
    db[2] = -3.0 * t * t + 6.0 * t * t1;
    db[3] = 3.0 * t * t;
}

void main() {
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    vec3 p00 = TCPosition[0];
    vec3 p01 = TCPosition[1];
    vec3 p02 = TCPosition[2];
    vec3 p03 = TCPosition[3];
    vec3 p10 = TCPosition[4];
    vec3 p11 = TCPosition[5];
    vec3 p12 = TCPosition[6];
    vec3 p13 = TCPosition[7];
    vec3 p20 = TCPosition[8];
    vec3 p21 = TCPosition[9];
    vec3 p22 = TCPosition[10];
    vec3 p23 = TCPosition[11];
    vec3 p30 = TCPosition[12];
    vec3 p31 = TCPosition[13];
    vec3 p32 = TCPosition[14];
    vec3 p33 = TCPosition[15];


    // Calcular las funciones base de Bezier
    float bu[4], bv[4];   
    float dbu[4], dbv[4]; 
    basisFunctions(bu, dbu, u);
    basisFunctions(bv, dbv, v);

    // Interpolacion de Bezier (TEPosition se pasa al geometry shader)
    vec3 posi =  bu[0] * ( bv[0]*p00 + bv[1]*p01 + bv[2]*p02 + bv[3]*p03 )
                + bu[1] * ( bv[0]*p10 + bv[1]*p11 + bv[2]*p12 + bv[3]*p13 )
                + bu[2] * ( bv[0]*p20 + bv[1]*p21 + bv[2]*p22 + bv[3]*p23 )
                + bu[3] * ( bv[0]*p30 + bv[1]*p31 + bv[2]*p32 + bv[3]*p33 );

    //Derivadas en el punto
    vec3 du =
              dbu[0] * ( bv[0]*p00 + bv[1]*p01 + bv[2]*p02 + bv[3]*p03 )
            + dbu[1] * ( bv[0]*p10 + bv[1]*p11 + bv[2]*p12 + bv[3]*p13 )
            + dbu[2] * ( bv[0]*p20 + bv[1]*p21 + bv[2]*p22 + bv[3]*p23 )
            + dbu[3] * ( bv[0]*p30 + bv[1]*p31 + bv[2]*p32 + bv[3]*p33 );
    vec3 dv =
              bu[0] * ( dbv[0]*p00 + dbv[1]*p01 + dbv[2]*p02 + dbv[3]*p03 )
            + bu[1] * ( dbv[0]*p10 + dbv[1]*p11 + dbv[2]*p12 + dbv[3]*p13 )
            + bu[2] * ( dbv[0]*p20 + dbv[1]*p21 + dbv[2]*p22 + dbv[3]*p23 )
            + bu[3] * ( dbv[0]*p30 + dbv[1]*p31 + dbv[2]*p32 + dbv[3]*p33 );

    TEPosition = vec4(posi, 1.0);
    //Vector normal de la superficie
    vec3 n = normalize(cross(du, dv));
    TENormal = normalize(NormalMatrix * n);
    TETessLevel = gl_TessLevelInner[0]; //siempre es el mismo
}


