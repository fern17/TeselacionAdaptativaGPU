#version 400
//Cantidad de vertices del patch de salida
layout (vertices = 16) out;

in vec3 VPosition[];
out vec3 TCPosition[];

uniform float MaxCurvature;
uniform float MaxTess;

//Calculo del area del triangulo formado por los puntos p0, p1 y p2
float calcArea(vec3 p0, vec3 p1, vec3 p2) {
    return 0.5*length(cross(p1-p0, p2-p0));
}

//Retorna la maxima curvatura para una curva de 4 puntos
float maxCurvature(vec3 p0, vec3 p1, vec3 p2, vec3 p3) {
    return max(calcArea(p0, p1, p2), calcArea(p1, p2, p3));
}

//Calcula la curvatura para el patch de Bezier. Primero calcula en un sentido y luego en el sentido perpendicular
//Se calculan 8 curvaturas y se queda con la mayor
float calcCurvature() {
    int p;
    float curv = 0.0;
    //Calculo de las curvaturas en una direccion
    for (int i = 0; i < 4; i++) {
        p = i*4;
        curv = max(curv, maxCurvature(VPosition[p+0], VPosition[p+1], VPosition[p+2], VPosition[p+3]));
    }
    //Calculo de las curvaturas en la direccion perpendicular a la anterior
    for (int i = 0; i < 4; i++) {
        curv = max(curv, maxCurvature(VPosition[i], VPosition[i+4], VPosition[i+8], VPosition[i+12]));
    }

    return curv;
}

//Para seno = 0 el nivel es 1.
//Para seno = 1 o -1, el nivel es maximo
float calcTessLevelByAngle(vec3 p0, vec3 p1, vec3 p2) {
    vec3 u = (p1-p0);
    vec3 v = (p2-p0);
    u = u/length(u);
    v = v/length(v);
    float sini = length(cross(u, v));
    return (MaxTess-1)*sini + 1.0; 
}

float maxTessLevelByAngle(vec3 p0, vec3 p1, vec3 p2, vec3 p3) {
    return max(calcTessLevelByAngle(p0, p1, p2), calcTessLevelByAngle(p1, p2, p3));
}

float calcTessLevelsByAngle() {
    int p;
    float tl = 1.0;
    //Calculo de las curvaturas en una direccion
    for (int i = 0; i < 4; i++) {
        p = i*4;
        tl = max(tl, maxTessLevelByAngle(VPosition[p+0], VPosition[p+1], VPosition[p+2], VPosition[p+3]));
    }
    //Calculo de las curvaturas en la direccion perpendicular a la anterior
    for (int i = 0; i < 4; i++) {
        tl = max(tl, maxTessLevelByAngle(VPosition[i], VPosition[i+4], VPosition[i+8], VPosition[i+12]));
    }

    return tl;
}


void main() {
    //Pasa la posicion sin modificar
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    TCPosition[gl_InvocationID] = VPosition[gl_InvocationID];
    float tess_level;
  //float kk = calcCurvature();
  //tess_level = ((MaxTess-1.0)/MaxCurvature)*kk + 1.0; //conversion lineal
    tess_level = calcTessLevelsByAngle();

    //Define los niveles de teselacion
    gl_TessLevelOuter[0] = tess_level;
    gl_TessLevelOuter[1] = tess_level;
    gl_TessLevelOuter[2] = tess_level;
    gl_TessLevelOuter[3] = tess_level;

    gl_TessLevelInner[0] = tess_level;
    gl_TessLevelInner[1] = tess_level;
}
