#version 400

layout(quads, equal_spacing, cw) in;
in vec2 TCPosition[];
in vec3 TCWorldPos[];
out vec3 TENormal;
out vec4 TEPosition;
out vec3 TEWorldPosition;
out vec2 TETex;
out float TETexMixVal;
out float TETessLevel;
uniform sampler2D HeightMap;

uniform mat4 ModelViewMatrix;
uniform mat4 MVPMatrix;
uniform float VertScale;
uniform float HorizScale;
uniform float MaxTess;
//uniform float MaxTrianglesPerTexel;
uniform vec2 MeshSize;

void main() {
    //vec2 patch_size = MaxTess / ( textureSize( HeightMap, 0 ) * MaxTrianglesPerTexel );

    //Coordenadas globales de textura para pedir la altura
    vec2 texCoords = TCPosition[0].xy + gl_TessCoord.xy / MeshSize; //patch_size;

    //Posicion en espacio de Mundo de este vertice 
    vec4 position;
    position.xz = texCoords.xy*HorizScale;
    position.y = VertScale * texture( HeightMap, texCoords ).r;
    position.w = 1.0;

    ///@todo: las normales se estan calculando por elemento original, y eso es malo
    vec3 p0 = TCWorldPos[0];
    vec3 p1 = TCWorldPos[1];
    vec3 p2 = TCWorldPos[2];
    vec3 p3 = TCWorldPos[3];

    //Normal como producto cruz de los vectores cruzados
    vec3 p02 = normalize(p2 - p0);
    vec3 p31 = normalize(p1 - p3);
    vec3 norm = normalize(cross(p02, p31));

    TEPosition = ModelViewMatrix * position;
    TEWorldPosition = position.xyz; 
    TENormal = norm;
    TETexMixVal = texture( HeightMap, texCoords ).r*2.2; //position.y sin escalar
    TETex = texCoords;
    TETessLevel = gl_TessLevelInner[0];
    gl_Position = MVPMatrix * position;
}
