#version 400
layout (vertices = 4) out;

in vec2 VPosition[];
out vec2 TCPosition[];
out vec3 TCWorldPosition[];

uniform float MaxTess;
uniform bool Tessellate;
uniform float TessDefault;
uniform mat4 MVPMatrix;
uniform float VertScale;
uniform float HorizScale;
uniform vec2 ViewPortSize;
uniform float MinEdgeLength;

uniform sampler2D HeightMap;

//Calcula la altura (coordenada Y) para el vertice de este quad
float getH(const in int idx) {
  vec2 texcoord = VPosition[idx].xy;
  float height = texture(HeightMap, texcoord).r;
  return height;

}

//Calcula el diametro de la esfera formada por la arista dada por e1 y e2 (en el plano xz)
float screenSphereSize(in vec3 e1,vec3 e2) {
    //vec3 p1 = (vec3(e1.x, 0.0, e1.y) + (vec3(e2.x, 0.0, e2.y))) * 0.5; //Punto medio entre e1 y e2
    vec3 p1 = (e1+e2)*0.5;
    vec3 p2 = p1;
    p2.y += distance(e1, e2);
    vec4 pp1 = MVPMatrix*vec4(p1, 1.0);
    vec4 pp2 = MVPMatrix*vec4(p2, 1.0);
    //Verrrr
    p1 = pp1.xyz / pp1.w;
    p2 = pp2.xyz / pp2.w;
    float l = length((p1.xy - p2.xy)*ViewPortSize*0.5);
    return clamp(l / MinEdgeLength, 1.0, MaxTess);
}

//Dado un valor y un limite, devuelve la potencia de dos mas cercana (buscando para arriba hasta max_exponent)
//Si el valor supera 2^max_exponent, retorna 2^max_exponent
float convertToExp2(float val, int max_exponent) {
    for (int exponent = 0; exponent <= max_exponent; exponent++) {
        float v = pow(2, exponent);
        if (val < v) return v;
    }
    return pow(2, max_exponent);
}

#define ID gl_InvocationID
void main() {
    //gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position; 
    TCPosition[gl_InvocationID] = VPosition[gl_InvocationID];
    if (Tessellate) {
        vec3 pos_world[4];
        for (int i = 0; i < 4; i++) {
            //pos_world[i] = VPosition[i]*HorizScale;
            pos_world[i] = vec3(VPosition[i].x*HorizScale, getH(i)*VertScale, VPosition[i].y*HorizScale);
            //TCWorldPosition[i] = pos_world[i];
        }
        TCWorldPosition[gl_InvocationID] = pos_world[gl_InvocationID]; //salida para el TES
        int exponent = int(ceil(log2(MaxTess)));
        //Calculo de la longitud de las aristas
        gl_TessLevelOuter[0] = convertToExp2(screenSphereSize(pos_world[0], pos_world[3]), exponent);
        gl_TessLevelOuter[1] = convertToExp2(screenSphereSize(pos_world[0], pos_world[1]), exponent);
        gl_TessLevelOuter[2] = convertToExp2(screenSphereSize(pos_world[1], pos_world[2]), exponent);
        gl_TessLevelOuter[3] = convertToExp2(screenSphereSize(pos_world[2], pos_world[3]), exponent);
        gl_TessLevelInner[0] = max(gl_TessLevelOuter[0], gl_TessLevelOuter[2]);
        gl_TessLevelInner[1] = max(gl_TessLevelOuter[1], gl_TessLevelOuter[3]);
    } else {
        gl_TessLevelOuter[0] = TessDefault;
        gl_TessLevelOuter[1] = TessDefault;
        gl_TessLevelOuter[2] = TessDefault;
        gl_TessLevelOuter[3] = TessDefault;
        gl_TessLevelInner[0] = TessDefault;
        gl_TessLevelInner[1] = TessDefault;
    }
}
